using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using HalconDotNet;
using System.IO;
namespace CameraImage
{
    public partial class Form1 : Form
    {
        HTuple hv_AcqHandle = null;
        bool isCamera = true;
        public Form1()
        {
            InitializeComponent();
            try
            {
                hv_AcqHandle = new HTuple();
                hv_AcqHandle.Dispose();
                HOperatorSet.OpenFramegrabber("MindVision17_X64", 1, 1, 0, 0, 0, 0, "progressive",
                 8, "Gray", -1, "false", "auto", "oufang", 0, -1, out hv_AcqHandle);
            }
            catch (Exception)
            {
                MessageBox.Show("未检测到相机！");
                isCamera = false;
            }          
        }
       
        private void RealTimeSnap_Click(object sender, EventArgs e)
        {
            try
            {
                timer1.Enabled = true;
                timer1.Start();
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.ToString());;
            }
            
            //hv_ModelID1.Dispose();
           // HOperatorSet.ReadShapeModel("f:/modelFiles/" + modelIsUsing.SelectedItem.ToString(), out hv_ModelID1);
               // checkModel(getCameraImage(), hv_ModelID1);
        }


        int a = 0, b = 0,c=0;
        private void timer1_Tick(object sender, EventArgs e)
        {             
            checkModel();        }

        private void checkModel()

        {      // Local iconic variables 

            HObject ho_Image1 = null;

            // Local control variables 

            HTuple hv_Row = new HTuple();
            HTuple hv_Column = new HTuple();
            HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
            HTuple hv_ModelID1 = new HTuple(), hv_ModelID2 = new HTuple();
            HTuple hv_ModelID3 = new HTuple(), hv_ModelID4 = new HTuple();
            HTuple hv_ModelIDs = new HTuple(), hv_Angle = new HTuple();
            HTuple hv_Score = new HTuple(), hv_ModelIndex = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image1);

            //Image Acquisition 01: Code generated by Image Acquisition 01
            HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
            hv_ModelID1.Dispose();
            HOperatorSet.ReadShapeModel("f:/modle1.shm", out hv_ModelID1);
            hv_ModelID2.Dispose();
            HOperatorSet.ReadShapeModel("f:/modle2.shm", out hv_ModelID2);
            hv_ModelID3.Dispose();
            HOperatorSet.ReadShapeModel("f:/modle3.shm", out hv_ModelID3);
            hv_ModelID4.Dispose();
            HOperatorSet.ReadShapeModel("f:/modle4.shm", out hv_ModelID4);

            hv_ModelIDs.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_ModelIDs = new HTuple();
                hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID1);
                hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID2);
                hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID3);
                hv_ModelIDs = hv_ModelIDs.TupleConcat(hv_ModelID4);
            }
            while ((int)(1) != 0)
            {
                HOperatorSet.WaitSeconds(1);

                ho_Image1.Dispose();
                HOperatorSet.GrabImageAsync(out ho_Image1, hv_AcqHandle, -1);
                HOperatorSet.GetImageSize(ho_Image1, out hv_Width, out hv_Height);
                HOperatorSet.SetPart(hWindowControl1.HalconWindow, 0, 0, hv_Width+1, hv_Height+1);
                HOperatorSet.DispObj(ho_Image1, hWindowControl1.HalconWindow);
                hv_Row.Dispose(); hv_Column.Dispose(); hv_Angle.Dispose(); hv_Score.Dispose(); hv_ModelIndex.Dispose();
                HOperatorSet.FindShapeModels(ho_Image1, hv_ModelIDs, 0, (new HTuple(360)).TupleRad()
                    , 0.5, 8, 0.5, "least_squares", 0, 0.8, out hv_Row, out hv_Column, out hv_Angle,
                    out hv_Score, out hv_ModelIndex);

                if ((int)(new HTuple(hv_Score.TupleGreater(0))) != 0)
                {
                    pictureBox1.BackColor = Color.Green;
                    a++;
                    TrueNum.Text = a + "个";
                }
                else
                {
                    pictureBox1.BackColor = Color.Red;
                    b++;
                    WrongNum.Text = b + "个";
                }
                c = a + b;
                allNum.Text = c + "个";
                /* ho_Image1.Dispose();
                  hv_AcqHandle.Dispose();
                  hv_Row.Dispose();
                  hv_Column.Dispose();
                  hv_ModelID1.Dispose();
                  hv_ModelID2.Dispose();
                  hv_ModelID3.Dispose();
                  hv_ModelID4.Dispose();
                  hv_ModelIDs.Dispose();
                  hv_Angle.Dispose();
                  hv_Score.Dispose();
                  hv_ModelIndex.Dispose();*/
            }

            //if ((int)(new HTuple((new HTuple(hv_Row1.TupleLength())).TupleEqual(1))) != 0)                                  
        }
    }
}